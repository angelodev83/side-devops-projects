name: Deploy to Azure Container Instances

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  LOCATION: "East US"

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./azure/project-2-cicd-pipeline
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './azure/project-2-cicd-pipeline/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Test Docker build
        run: |
          docker build -t test-build .
          echo "Docker build successful!"

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./azure/project-2-cicd-pipeline
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Generate unique Resource Group and ACR names
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          export AZURE_RESOURCE_GROUP="rg-mywebapp-$TIMESTAMP"
          export ACR_NAME="acrmywebapp$TIMESTAMP"
          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP" >> $GITHUB_ENV
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          echo "Generated Resource Group: $AZURE_RESOURCE_GROUP"
          echo "Generated ACR Name: $ACR_NAME"

      - name: Create Resource Group
        run: |
          az group create --name $AZURE_RESOURCE_GROUP --location $LOCATION

      - name: Create Azure Container Registry
        run: |
          az acr create \
            --name $ACR_NAME \
            --resource-group $AZURE_RESOURCE_GROUP \
            --sku Basic \
            --admin-enabled true \
            --location $LOCATION

      - name: Get ACR credentials
        id: acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" -o tsv)
          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: build-image
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          APP_NAME="mywebapp-$TIMESTAMP"
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "app-name=$APP_NAME" >> $GITHUB_OUTPUT

          az acr login --name $ACR_NAME
          
          docker build -t $APP_NAME .
          IMAGE_TAG="${ACR_NAME}.azurecr.io/${APP_NAME}:latest"
          docker tag $APP_NAME $IMAGE_TAG
          docker push $IMAGE_TAG
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to Azure Container Instances
        run: |
          az container create \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name $APP_NAME \
            --image ${{ steps.build-image.outputs.image-tag }} \
            --registry-login-server ${ACR_NAME}.azurecr.io \
            --registry-username $ACR_USERNAME \
            --registry-password $ACR_PASSWORD \
            --dns-name-label $APP_NAME \
            --os-type Linux \
            --ports 3001 \
            --environment-variables NODE_ENV=production \
            --cpu 1 \
            --memory 1.5 \
            --restart-policy Always \
            --location $LOCATION

      - name: Wait for container and get URL
        run: |
          az container wait --resource-group $AZURE_RESOURCE_GROUP --name $APP_NAME --custom "instanceView.state=='Running'"

          FQDN=$(az container show \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name $APP_NAME \
            --query ipAddress.fqdn \
            --output tsv)
          
          if [ "$FQDN" != "" ] && [ "$FQDN" != "null" ]; then
            echo ""
            echo "üöÄ Deployment successful!"
            echo "üì± Your app is live at: http://$FQDN:3001"
            echo "üè• Health check: http://$FQDN:3001/health"
            echo "üìä API endpoint: http://$FQDN:3001/api/info"
          else
            echo "‚ùå Could not get container FQDN. Check Azure portal for details."
